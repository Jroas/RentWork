-- MySQL Script generated by MySQL Workbench
-- Sat Aug  3 12:28:00 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Bd_proyecto
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Bd_proyecto
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Bd_proyecto` DEFAULT CHARACTER SET utf8 ;
USE `Bd_proyecto` ;

-- -----------------------------------------------------
-- Table `Bd_proyecto`.`CLIENTES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`CLIENTES` (
  `idCLIENTES` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID autoincrementa para identificar el cliente',
  `CLENTE_Id` VARCHAR(45) NOT NULL COMMENT 'Idebtificacion del cliente para saber el docuenmteto del clinete\n',
  `CLIENTE_Nombres` VARCHAR(45) NOT NULL COMMENT 'Nombre del cliente en su documento',
  `CLIENTE_Apellidos` VARCHAR(45) NOT NULL COMMENT 'Apellidos del cliente de su documento ',
  `CLIENTE_Aceptacion` VARCHAR(4) BINARY NOT NULL COMMENT 'Si es aceptado el cliente para poder hacer rentas de los espacios',
  `CLIENTE_Cuenta_Banc` VARCHAR(45) NOT NULL COMMENT 'Cuenta bancaria existente y valda para generar los pagos ',
  `CLIENTE_PQR` VARCHAR(100) NULL COMMENT 'quejas y reclasmo asociados al cliente o que el cliente genera',
  `CLIENTE_Tel` VARCHAR(45) NOT NULL COMMENT 'telefono del cliente',
  `CLIENTE_Correo` VARCHAR(45) NOT NULL COMMENT 'Correo del cliente para comuniacion deirecta',
  `CLIENTE_Pasword` VARCHAR(200) NOT NULL COMMENT 'clave de la cuenta del cliente ',
  PRIMARY KEY (`idCLIENTES`, `CLIENTE_Cuenta_Banc`, `CLENTE_Id`),
  UNIQUE INDEX `CLIENTES_UNIQUE` (`CLENTE_Id` ASC) VISIBLE,
  UNIQUE INDEX `Clientes_Correo_UNIQUE` (`CLIENTE_Correo` ASC) VISIBLE,
  UNIQUE INDEX `CLIENTE_Cuenta_Banc_UNIQUE` (`CLIENTE_Cuenta_Banc` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`PROVEEDORES_ESPACIOS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`PROVEEDORES_ESPACIOS` (
  `idPROVEEDORES_ESPACIOS` INT NOT NULL,
  `PROVEEDORES_ESPACIOS_Nombre` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Apellidos` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Antecedentes` VARCHAR(4) BINARY NOT NULL,
  `PROVEEDORES_ESPACIOS_Id_oficinas` VARCHAR(45) NOT NULL,
  `PROVEEDORES_ESPACIOS_Ubicacion` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Pnt_User` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Permisos_Guberna` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Registro_usuarios` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_PQR` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Alianzas` VARCHAR(45) NULL,
  `PROVEEDORES_ESPACIOS_Cnta_bancaria` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPROVEEDORES_ESPACIOS`, `PROVEEDORES_ESPACIOS_Id_oficinas`),
  UNIQUE INDEX `idPROVEEDORES_ESPACIOS_UNIQUE` (`idPROVEEDORES_ESPACIOS` ASC) VISIBLE,
  UNIQUE INDEX `PROVEEDORES_ESPACIOS_Cnta_bancaria_UNIQUE` (`PROVEEDORES_ESPACIOS_Cnta_bancaria` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`CIUDADES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`CIUDADES` (
  `idCIUDADES` INT NOT NULL,
  `CIUDADES_Pais` VARCHAR(45) NULL,
  `CIUDADES_Cod_Postal` VARCHAR(45) NULL,
  `CIUDADES_Numero_Espacios` INT ZEROFILL NULL,
  PRIMARY KEY (`idCIUDADES`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`ESPACIOS_TRABAJO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`ESPACIOS_TRABAJO` (
  `id_ESPACIOS_TRABAJO` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Id del espacio de trabajo',
  `ESPACIOS_TRABAJO_Id_Ofice` VARCHAR(45) NOT NULL COMMENT 'Identificador del espacio de trabajo espacificamente la oficina',
  `ESPACIOS_TRABAJO_Tippo_espacio` VARCHAR(45) NOT NULL COMMENT 'Tipo de la oficina que se quiere rentar',
  `ESPACIOS_TRABAJO_ID_Amenidades` INT NOT NULL COMMENT 'Amenidades que tiene la oficina ',
  `ESPACIOS_TRABAJO_Ubicacion` INT NOT NULL COMMENT 'Lugar donde se encuentra ubicada la oficina ',
  `ESPACIOS_TRABAJO_Aforo` VARCHAR(45) NOT NULL COMMENT 'Numero de paresonas que puede alojar la oficna que se quiere rentar ',
  `ESPACIOS_TRABAJO_Fraja_Horaria` VARCHAR(45) NOT NULL COMMENT 'Franja Horaria dia  hora  en la que se encuentra  la oficina ',
  `ESPACIOS_TRABAJO_Disponibilidad` VARCHAR(45) NOT NULL COMMENT 'Disponibilidad de la frnajas horarias',
  `ESPACIOS_TRABAJO_Precio` INT UNSIGNED NOT NULL COMMENT 'Valor de la las franjas horarias que tiene la oficina ',
  `ESPACIOS_TRABAJO_Pnt_Movilidad` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Puntuacion que se le asigana a la oficina por la ubicacion que tiene respecto a la facilidad que tiene para movilizarse a ella ',
  `ESPACIOS_TRABAJO_pnt_Ofice` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'Puntuacion que se le asigna a la oficina, esta es asignada por el promedio aritmetica de que da cada uno de los usuarios que rentaron anterirmente la oficna ',
  PRIMARY KEY (`id_ESPACIOS_TRABAJO`),
  UNIQUE INDEX `ESPACIOS_TRABAJO_Id_Ofice_UNIQUE` (`ESPACIOS_TRABAJO_Id_Ofice` ASC) VISIBLE,
  UNIQUE INDEX `id_ESPACIOS_TRABAJO_UNIQUE` (`id_ESPACIOS_TRABAJO` ASC) VISIBLE,
  INDEX `fk_espacios_trabajo_ciudades_idx` (`ESPACIOS_TRABAJO_Ubicacion` ASC) VISIBLE,
  CONSTRAINT `fk_espacios_trabajo_proveedor`
    FOREIGN KEY (`ESPACIOS_TRABAJO_Id_Ofice`)
    REFERENCES `Bd_proyecto`.`PROVEEDORES_ESPACIOS` (`PROVEEDORES_ESPACIOS_Id_oficinas`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_espacios_trabajo_ciudades`
    FOREIGN KEY (`ESPACIOS_TRABAJO_Ubicacion`)
    REFERENCES `Bd_proyecto`.`CIUDADES` (`idCIUDADES`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`RENTAS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`RENTAS` (
  `idRENTAS` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificar de la renta que se genera o reserva que se haga',
  `RENTA_Estado` VARCHAR(45) NOT NULL COMMENT 'Estado de la renta si es una reserva, si esta la rnta activa, o fiinalizado',
  `RENTA_Id_User` VARCHAR(45) NOT NULL COMMENT 'Id del usuario que genera la solicituyda de renta ',
  `RENTA_ID_Space` VARCHAR(45) NOT NULL COMMENT 'Id del espacio que se quiere rentar ',
  `RENTA_ID_Pago` VARCHAR(45) NOT NULL COMMENT 'Id del pago que se genera para llevar registro ',
  `RENTAS_Tipo_Espacio` VARCHAR(45) NULL COMMENT 'Detalles de la renta que se genera.',
  `RENTAS_Hora` VARCHAR(45) NOT NULL COMMENT 'Detalles temporales de la solicitud de renta que se haga ',
  `RENTAS_Amenidades` VARCHAR(45) NULL,
  PRIMARY KEY (`idRENTAS`, `RENTA_ID_Pago`),
  INDEX `fk_Renta_Clientes_idx` (`RENTA_Id_User` ASC) VISIBLE,
  INDEX `fk_Renta_Espacio_idx` (`RENTA_ID_Space` ASC) VISIBLE,
  CONSTRAINT `fk_Renta_Cliente`
    FOREIGN KEY (`RENTA_Id_User`)
    REFERENCES `Bd_proyecto`.`CLIENTES` (`CLENTE_Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Renta_Espacio`
    FOREIGN KEY (`RENTA_ID_Space`)
    REFERENCES `Bd_proyecto`.`ESPACIOS_TRABAJO` (`ESPACIOS_TRABAJO_Id_Ofice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`PAGOS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`PAGOS` (
  `idPAGOS` VARCHAR(45) NOT NULL,
  `PAGO_Metodo` VARCHAR(45) NULL COMMENT 'Metodo de pago que se selecciono para la reserva',
  `PAGO_Cuenta_Orig` VARCHAR(45) NOT NULL COMMENT 'Cuenta origen del cliente ',
  `PAGO_Cuenta_Dest` VARCHAR(45) NOT NULL COMMENT 'Cuenta destino del proveedor ',
  `PAGO_Precio_Total` INT NOT NULL,
  UNIQUE INDEX `PAGO_Cuenta_Orig_UNIQUE` (`PAGO_Cuenta_Orig` ASC) VISIBLE,
  UNIQUE INDEX `PAGO_Cuenta_Dest_UNIQUE` (`PAGO_Cuenta_Dest` ASC) VISIBLE,
  INDEX `fk_pago_Renta_idx` (`idPAGOS` ASC) VISIBLE,
  CONSTRAINT `fk_pago_Renta`
    FOREIGN KEY (`idPAGOS`)
    REFERENCES `Bd_proyecto`.`RENTAS` (`RENTA_ID_Pago`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`CATEGORIA_AMENIDADES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`CATEGORIA_AMENIDADES` (
  `CATEGORIA_AMENIDADES_ID` INT NOT NULL,
  `CATEGORIA_AMENIDADES_Nombre_Amenidad` VARCHAR(45) NULL,
  PRIMARY KEY (`CATEGORIA_AMENIDADES_ID`),
  UNIQUE INDEX `CATEGORIA_AMENIDADES_ID_UNIQUE` (`CATEGORIA_AMENIDADES_ID` ASC) VISIBLE,
  UNIQUE INDEX `CATEGORIA_AMENIDADES_Nombre_Amenidad_UNIQUE` (`CATEGORIA_AMENIDADES_Nombre_Amenidad` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`AMENIDADES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`AMENIDADES` (
  `AMENIDADES_Clave` INT NOT NULL,
  `AMENIDADES_Tipo` VARCHAR(45) NULL,
  INDEX `fk_AMENIDADES_CAT_AMENIDADES_idx` (`AMENIDADES_Tipo` ASC) VISIBLE,
  PRIMARY KEY (`AMENIDADES_Clave`),
  CONSTRAINT `fk_AMENIDADES_CAT_AMENIDADES`
    FOREIGN KEY (`AMENIDADES_Tipo`)
    REFERENCES `Bd_proyecto`.`CATEGORIA_AMENIDADES` (`CATEGORIA_AMENIDADES_Nombre_Amenidad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Bd_proyecto`.`LISTA_AMENIDADES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bd_proyecto`.`LISTA_AMENIDADES` (
  `LISTA_AMENIDADES_Id_Renta` INT NOT NULL,
  `LISTA_AMENIDADES_ID_Amenidad` INT NOT NULL,
  `LISTA_AMENIDADES_Cantidad_Amen` INT NULL,
  `LISTA_AMENIDADEs_Precio` INT NULL,
  PRIMARY KEY (`LISTA_AMENIDADES_Id_Renta`),
  INDEX `fk_Lista_amenidades_amenidad_idx` (`LISTA_AMENIDADES_ID_Amenidad` ASC) VISIBLE,
  CONSTRAINT `fk_LISTA_AMENIDAD_RENTA`
    FOREIGN KEY ()
    REFERENCES `Bd_proyecto`.`RENTAS` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lista_amenidades_amenidad`
    FOREIGN KEY (`LISTA_AMENIDADES_ID_Amenidad`)
    REFERENCES `Bd_proyecto`.`AMENIDADES` (`AMENIDADES_Clave`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
